
name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      # Compilar la aplicación Lambda primero (si el proyecto está en un directorio separado)
      - name: Build Lambda function
        working-directory: ../apikey-admin/apikey  # Ajusta esta ruta según la estructura de tu proyecto
        run: mvn clean package -DskipTests

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      # Actualizar o crear el archivo cdk.json con las variables de entorno necesarias
      - name: Create CDK configuration
        run: |
          cat > cdk.json << EOF
          {
            "app": "mvn -e -q compile exec:java",
            "context": {
              "@aws-cdk/core:enableStackNameDuplicates": "true",
              "aws-cdk:enableDiffNoFail": "true",
              "@aws-cdk/core:stackRelativeExports": "true",
              "@aws-cdk/aws-ecr-assets:dockerIgnoreSupport": true,
              "@aws-cdk/aws-secretsmanager:parseOwnedSecretName": true,
              "@aws-cdk/aws-kms:defaultKeyPolicies": true,
              "@aws-cdk/aws-s3:grantWriteWithoutAcl": true,
              "@aws-cdk/aws-ecs-patterns:removeDefaultDesiredCount": true,
              "CDK_DEFAULT_ACCOUNT": "${{ vars.AWS_ACCOUNT_ID }}",
              "CDK_DEFAULT_REGION": "${{ vars.AWS_REGION }}",
              "VPC_ID": "${{ vars.VPC_ID }}",
              "SUBNET_IDS": "${{ vars.SUBNET_IDS }}",
              "SECURITY_GROUP_IDS": "${{ vars.SECURITY_GROUP_IDS }}",
              "STAGE_NAME": "${{ vars.STAGE_NAME }}",
              "MONGODB_CONNECTION_STRING": "${{ secrets.MONGODB_CONNECTION_STRING }}"
            }
          }
          EOF

      - name: CDK Bootstrap (if needed)
        run: cdk bootstrap
        env:
          CDK_DEFAULT_ACCOUNT: ${{ vars.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ vars.AWS_REGION }}

      - name: CDK Deploy
        run: cdk deploy --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ vars.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ vars.AWS_REGION }}
          VPC_ID: ${{ vars.VPC_ID }}
          SUBNET_IDS: ${{ vars.SUBNET_IDS }}
          SECURITY_GROUP_IDS: ${{ vars.SECURITY_GROUP_IDS }}
          MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
          LOG_LEVEL: ${{ vars.LOG_LEVEL }}
          LOG_CHAN: ${{ vars.LOG_CHAN }}