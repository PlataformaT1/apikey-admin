name: Java Quarkus + CDK Deployment

on:
  push:
    branches:
      - develop
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Entorno de despliegue'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.pull_request.merged }}" == "true" ] && [ "${{ github.base_ref }}" == "main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: determine-environment
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Set up Maven
        uses: stCarolas/setup-maven@v4.5
        with:
          maven-version: '3.8.7'

      - name: Generate Maven Wrapper
        working-directory: ./apikey
        run: mvn wrapper:wrapper

      - name: Run tests
        working-directory: ./apikey
        run: ./mvnw test

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [determine-environment, test]
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: ${{ needs.determine-environment.outputs.environment }}
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Debug environment variables
      - name: Debug environment variables
        run: |
          echo "=== Debugging Environment Variables ==="
          echo "GITHUB_REF: $GITHUB_REF"
          echo "Environment: ${{ needs.determine-environment.outputs.environment }}"
          echo "AWS_REGION: ${{ vars.AWS_REGION }}"
          echo "AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}"
          echo "VPC_ID: ${{ vars.VPC_ID }}"
          echo "SUBNET_IDS: ${{ vars.SUBNET_IDS }}"
          echo "SECURITY_GROUP_IDS: ${{ vars.SECURITY_GROUP_IDS }}"
          echo "MONGODB_CONNECTION_STRING is set: ${{ secrets.MONGODB_CONNECTION_STRING != '' }}"
          echo "STAGE_NAME: ${{ vars.STAGE_NAME }}"

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      # Obtener y almacenar la cuenta AWS actual
      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT

      # Build the Quarkus application
      - name: Build Quarkus Application
        working-directory: ./apikey
        run: |
          mvn package \
            -Dquarkus.profile=${{ needs.determine-environment.outputs.environment }} \
            -Dquarkus.mongodb.connection-string="${{ secrets.MONGODB_CONNECTION_STRING }}" \
            -Dquarkus.lambda.vpc-id="${{ vars.VPC_ID }}" \
            -Dquarkus.lambda.subnet-ids="${{ vars.SUBNET_IDS }}" \
            -Dquarkus.lambda.security-group-ids="${{ vars.SECURITY_GROUP_IDS }}" \
            -Dquarkus.lambda.aws-region="${{ vars.AWS_REGION }}" \
            -Dquarkus.lambda.aws-stage="${{ vars.STAGE_NAME }}" \
            -Dquarkus.kubernetes.deploy=false

      # Exportar variables de entorno para CDK
      - name: Export environment variables for CDK
        run: |
          echo "ENVIRONMENT=${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_ENV
          echo "MONGODB_CONNECTION_STRING=${{ secrets.MONGODB_CONNECTION_STRING }}" >> $GITHUB_ENV
          echo "VPC_ID=${{ vars.VPC_ID }}" >> $GITHUB_ENV
          echo "SUBNET_IDS=${{ vars.SUBNET_IDS }}" >> $GITHUB_ENV
          echo "SECURITY_GROUP_IDS=${{ vars.SECURITY_GROUP_IDS }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV
          echo "STAGE_NAME=${{ vars.STAGE_NAME }}" >> $GITHUB_ENV
          echo "LAMBDA_FUNCTION_NAME=apikey-admin-${{ needs.determine-environment.outputs.environment }}" >> $GITHUB_ENV

      # Desplegar con CDK (sintetizar primero para verificar)
      - name: Synthesize CDK Stack
        run: |
          echo "Sintetizando stack CDK para verificar configuraci칩n"
          mvn -e compile exec:java -Dexec.args="synth"

      # Desplegar con CDK
      - name: Deploy with CDK
        run: |
          echo "Desplegando con CDK para entorno: $ENVIRONMENT"
          mvn -e compile exec:java -Dexec.args="deploy --require-approval=never"

      # Verificar el despliegue
      - name: Verify Deployment
        run: |
          echo "Deployment completed!"
          echo "Environment: $ENVIRONMENT"
          
          # Obtener el ARN de la funci칩n Lambda desplegada
          FUNCTION_ARN=$(aws lambda list-functions --query "Functions[?FunctionName=='$LAMBDA_FUNCTION_NAME'].FunctionArn" --output text)
          
          if [ -n "$FUNCTION_ARN" ]; then
            echo "Lambda Function ARN: $FUNCTION_ARN"
          
            # Obtener informaci칩n sobre API Gateway
            API_ID=$(aws apigateway get-rest-apis --query "items[?name=='$LAMBDA_FUNCTION_NAME-api'].id" --output text || aws apigateway get-rest-apis --query "items[?name=='$LAMBDA_FUNCTION_NAME'].id" --output text)
          
            if [ -n "$API_ID" ] && [ "$API_ID" != "None" ]; then
              API_URL="https://$API_ID.execute-api.$AWS_REGION.amazonaws.com/$STAGE_NAME"
              echo "API Gateway URL: $API_URL"
          
              # Realizar una prueba b치sica para verificar que la API responde
              echo "Testing API endpoint: $API_URL/apikey/hello"
              RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/apikey/hello" || echo "Failed to connect")
              echo "Response status code: $RESPONSE"
            else
              echo "No API Gateway found or not configured correctly"
            fi
          else
            echo "Lambda function not found or you don't have permission to view it"
          fi