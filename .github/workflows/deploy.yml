name: Deploy to AWS

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

permissions:
  id-token: write
  contents: read

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    needs: determine-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}

      # Compilar la aplicación Lambda primero (si el proyecto está en un directorio separado)
      - name: Build Lambda function
        working-directory: ../apikey-admin/apikey  # Ajusta esta ruta según la estructura de tu proyecto
        run: mvn clean package -DskipTests

      # Verificar y guardar el ZIP para debug
      - name: Debug Lambda function ZIP
        run: |
          echo "Verificando la estructura del proyecto:"
          pwd
          ls -la
          
          echo "Buscando el archivo ZIP de la función Lambda:"
          LAMBDA_ZIP="../apikey-admin/apikey/target/function.zip"
          
          if [ -f "$LAMBDA_ZIP" ]; then
            echo "✅ El archivo ZIP existe en la ruta esperada"
            mkdir -p ./debug-artifacts
            cp "$LAMBDA_ZIP" ./debug-artifacts/
          
            echo "Contenido del archivo ZIP:"
            unzip -l "$LAMBDA_ZIP"
          
            echo "Verificando si existe el archivo bootstrap:"
            unzip -l "$LAMBDA_ZIP" | grep bootstrap
          
            echo "Extrayendo temporalmente para verificar permisos:"
            mkdir -p ./temp-extract
            unzip -o "$LAMBDA_ZIP" -d ./temp-extract
            ls -la ./temp-extract
            if [ -f "./temp-extract/bootstrap" ]; then
              echo "Permisos del archivo bootstrap:"
              ls -la ./temp-extract/bootstrap
            else
              echo "⚠️ No se encontró el archivo bootstrap en el ZIP"
            fi
          else
            echo "⚠️ El archivo ZIP no existe en la ruta esperada"
            echo "Buscando archivos ZIP en el proyecto:"
            find .. -name "*.zip" | grep -v "/.git/" || echo "No se encontraron archivos ZIP"
          
            echo "Estructura de directorios:"
            find .. -type d | grep -v "/.git/" | sort
          fi

      # Guardar el ZIP como artefacto para análisis posterior
      - name: Upload Lambda ZIP for debugging
        uses: actions/upload-artifact@v3
        with:
          name: lambda-function-zip
          path: ./debug-artifacts/
          retention-days: 5

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # Usar Node.js 20 LTS para CDK v2

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      # Crear archivo cdk.json compatible con CDK v2
      - name: Create CDK configuration
        run: |
          cat > cdk.json << EOF
          {
            "app": "mvn -e -q compile exec:java",
            "context": {
              "CDK_DEFAULT_ACCOUNT": "${{ vars.AWS_ACCOUNT_ID }}",
              "CDK_DEFAULT_REGION": "${{ vars.AWS_REGION }}",
              "VPC_ID": "${{ vars.VPC_ID }}",
              "SUBNET_IDS": "${{ vars.SUBNET_IDS }}",
              "SECURITY_GROUP_IDS": "${{ vars.SECURITY_GROUP_IDS }}",
              "STAGE_NAME": "${{ vars.STAGE_NAME }}",
              "MONGODB_CONNECTION_STRING": "${{ secrets.MONGODB_CONNECTION_STRING }}"
            }
          }
          EOF

      # Ejecutar CDK Deploy sin bootstrap
      - name: CDK Deploy
        run: |
          STACK_NAME="ApiKeyDeployStack"
          
          # Usamos --no-bootstrap para evitar intentar el bootstrap
          cdk deploy $STACK_NAME --require-approval never --no-bootstrap
        env:
          CDK_DEFAULT_ACCOUNT: ${{ vars.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ vars.AWS_REGION }}
          VPC_ID: ${{ vars.VPC_ID }}
          SUBNET_IDS: ${{ vars.SUBNET_IDS }}
          SECURITY_GROUP_IDS: ${{ vars.SECURITY_GROUP_IDS }}
          MONGODB_CONNECTION_STRING: ${{ secrets.MONGODB_CONNECTION_STRING }}
          LOG_LEVEL: ${{ vars.LOG_LEVEL }}
          LOG_CHAN: ${{ vars.LOG_CHAN }}
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}
          # Silenciar advertencias de Node.js
          JSII_SILENCE_WARNING_DEPRECATED_NODE_VERSION: "1"